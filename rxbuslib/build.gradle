apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"

// This is the library version used when deploying the artifact
version = "0.7"
android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 7
        versionName version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.3'
    implementation 'com.android.support:support-annotations:26.0.2'
    //  ##########  TESTING ##########
    //  required if you want to use Mockito for unit tests
    implementation 'org.mockito:mockito-core:2.7.22'

//  required if you want to use Mockito for Android tests
    androidTestImplementation 'org.mockito:mockito-android:2.7.22'
    testImplementation 'org.robolectric:robolectric:3.1.1'
    testImplementation 'org.assertj:assertj-core:2.6.0'
}

def bintrayRepo       = 'bintray-analizer1-RxBusLib'
def bintrayName       = 'analizer1-RxBusLib'
def libName           = 'com.github.analizer1:rxbuslib'
def publishedGroupId  = 'com.github.analizer1'
def libraryName       = 'RxBusLib'
def artifact          = 'rxbuslib'
def libraryDescription= 'This is an experimental implementation of an event bus using Rx Subjects (PublishSubject, ReplaySubject, and BehaviorSubject) for Android'
def siteUrl           = 'https://github.com/analizer1/RxBusLib'
def gitUrl            = 'https://github.com/analizer1/RxBusLib.git'
def developerId       = 'analizer1'
def developerName     = 'Panatchai Vathanasri'
def developerEmail    = 'analizer1@gmail.com'
def licenseName       = 'The Apache Software License, Version 2.0'
def licenseUrl        = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
def allLicenses       = ["Apache-2.0"]
group = "com.github.analizer"

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                name libraryName
                description = libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }

                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

// https://github.com/bintray/gradle-bintray-plugin
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = libraryName
        // it is the name that appears in bintray when logged
        name = libraryName
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        version {
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password") //Optional. The passphrase for GPG signing'
            }
        }
    }
}
